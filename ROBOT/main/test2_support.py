#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Mar 29, 2024 09:56:10 PM CET  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import test2

import time

import CCommunication2 as com
from strategies import *
from threading import Timer, Thread, Event

# Périphérique de communication série
# PORT = "/dev/ttyUSB0"
#PORT = "/dev/ttyACM0"
PORT = "COM11"
BAUDRATE = 9600

com = com.communication(PORT)

_debug = True # False to eliminate debug printing from callback functions.

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = test2.window(_top1)
    root.mainloop()

def connexion(*args):
    if _debug:
        print('test2_support.connexion')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

    try:
        com.connexion()
        _w1.write(time.ctime() + " -> Connexion ...")
        return True
    except Exception as e:
        # Just print(e) is cleaner and more likely what you want,
        # but if you insist on printing message specifically whenever possible...
        print(e)
        _w1.write(str(e) + "\n")
        return False

def deconnexion(*args):
    if _debug:
        print('test2_support.deconnexion')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    com.deconnexion()
    _w1.write(time.ctime() + " -> Deconnexion...")
    _w1.write("Good bye !\n")

def avancer(*args):
    if _debug:
        print('test2_support.avancer')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    _w1.write(time.ctime() + " -> Forward "+ _w1.axe.get() + " " +  str(_w1.mouvement.get()) + " steps " + "...")
    try:
        com.forward(_w1.axe.get(), _w1.mouvement.get())
    except Exception as e:
        print("Erreur : port ouvert ?")
        print(e)
        _w1.write(str(e) + "\n")

def reculer(*args):
    if _debug:
        print('test2_support.reculer')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    _w1.write(time.ctime() + " -> Backward "+ _w1.axe.get() + " " + str(_w1.mouvement.get()) + " steps " + "...")
    try:
        com.backward(_w1.axe.get(), _w1.mouvement.get())
    except Exception as e:
        print("Erreur : port ouvert ?")
        print(e)
        _w1.write(str(e) + "\n")

def fermer(*args):
    if _debug:
        print('test2_support.fermer')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    print("Fermeture "+ _w1.axe.get())
    _w1.write(time.ctime() + " -> Close "+_w1.axe.get()+" gripper...")
    try:
        com.close(_w1.axe.get())
    except Exception as e:
        print("Erreur : port ouvert ?")
        print(e)
        _w1.write(str(e) + "\n")

def ouvrir(*args):
    if _debug:
        print('test2_support.ouvrir')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    _w1.write(time.ctime() + " -> Open "+_w1.axe.get()+" gripper...")
    try:
        com.open(_w1.axe.get())
    except Exception as e:
        print("Erreur : port ouvert ?")
        print(e)
        _w1.write(str(e) + "\n")


def rotation_anti_horaire(*args):
    if _debug:
        print('test2_support.rotation_anti_horaire')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    print("Tourne dans sens antihoraire")
    _w1.write(time.ctime() + " -> Anti-clockwise rotation "+str(_w1.angle.get())+"°...")
    try:
        m = com.rotate(-_w1.angle.get())
    except Exception as e:
        print("Erreur : port ouvert ?")
        print(e)
        _w1.write(str(e) + "\n")

def rotation_horaire(*args):
    if _debug:
        print('test2_support.rotation_horaire')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    print("Tourne dans sens horaire")
    _w1.write(time.ctime() + " -> Clockwise rotation "+str(_w1.angle.get())+"°...")
    try:
        m = com.rotate(_w1.angle.get())
    except Exception as e:
        print("Erreur : port ouvert ?")
        print(e)
        _w1.write(str(e) + "\n")

def monter(*args):
    if _debug:
        print('test2_support.monter')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    print("Monter pince "+ _w1.axe.get())
    _w1.write(time.ctime() + " -> Up "+_w1.axe.get()+" gripper "+str(_w1.deplacement_pince.get())+" steps...")
    try:
        m = com.up(_w1.axe.get(), _w1.deplacement_pince.get())
    except Exception as e:
        print("Erreur : port ouvert ?")
        print(e)
        _w1.write(str(e) + "\n")

def descendre(*args):
    if _debug:
        print('test2_support.descendre')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    print("Descendre pince "+ _w1.axe.get())
    _w1.write(time.ctime() + " -> Down "+_w1.axe.get()+" gripper "+str(_w1.deplacement_pince.get())+" steps...")
    try:
        m = com.down(_w1.axe.get(), _w1.deplacement_pince.get())
    except Exception as e:
        print("Erreur : port ouvert ?")
        print(e)
        _w1.write(str(e) + "\n")

def stop(*args):
    if _debug:
        print('test2_support.stop')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    print("Stop")
    _w1.write("\n" + time.ctime() + " -> stop...")
    try:
        com.stop_request()
    except Exception as e:
        print("Erreur : port ouvert ?")
        print(e)
        _w1.write(str(e) + "\n")

def restart(*args):
    if _debug:
        print('test2_support.stop')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    print("Continue after stop")
    _w1.write("\n" + time.ctime() + " -> restart after stop...")
    try:
        com.restart()
    except Exception as e:
        print("Erreur : port ouvert ?")
        print(e)
        _w1.write(str(e) + "\n")

def done():
    if com.r is not None:
        _w1.write(com.r)
        com.r = None
    _w1.t = Timer(0.01, done)
    _w1.t.start()

if __name__ == '__main__':
    test2.start_up()




