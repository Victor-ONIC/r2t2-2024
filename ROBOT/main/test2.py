#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Mar 29, 2024 09:56:13 PM CET  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

import test2_support

_bgcolor = '#d9d9d9'
_fgcolor = 'black'
_tabfg1 = 'black'
_tabfg2 = 'white'
_bgmode = 'light'
_tabbg1 = '#d9d9d9'
_tabbg2 = 'gray40'

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return
    try: test2_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'classic.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('classic')
    style.configure('.', font = "TkDefaultFont")
    _style_code_ran = 1

class window:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        self.t = None

        top.geometry("720x460+344+122")
        top.attributes('-fullscreen', True)
        # top.minsize(120, 1)
        # top.maxsize(1540, 845)
        top.resizable(0,  0)
        top.title("r2t2 - 2024 - Avignon Université")
        top.configure(background="#d9d9d9")
        # top.configure(highlightbackground="#d9d9d9")
        # top.configure(highlightcolor="black")

        self.top = top

        self.axe = tk.StringVar(value="X")
        self.deplacement_pince = tk.IntVar()
        self.angle = tk.IntVar()
        self.mouvement = tk.IntVar()

        self.lb_rotations = tk.LabelFrame(self.top)
        self.lb_rotations.place(x=20, y=240, height=115, width=230)
        self.lb_rotations.configure(relief='groove')
        self.lb_rotations.configure(font="-family {Segoe UI} -size 9")
        self.lb_rotations.configure(foreground="black")
        self.lb_rotations.configure(text='''Rotations''')
        self.lb_rotations.configure(background="#d9d9d9")
        self.lb_rotations.configure(highlightbackground="#d9d9d9")
        self.lb_rotations.configure(highlightcolor="black")

        self.bt_rot_horaire = tk.Button(self.lb_rotations)
        self.bt_rot_horaire.place(x=20, y=80, height=26, width=80
                , bordermode='ignore')
        self.bt_rot_horaire.configure(activebackground="#d9d9d9")
        self.bt_rot_horaire.configure(activeforeground="black")
        self.bt_rot_horaire.configure(background="#d9d9d9")
        self.bt_rot_horaire.configure(command=test2_support.rotation_horaire)
        self.bt_rot_horaire.configure(disabledforeground="#a3a3a3")
        self.bt_rot_horaire.configure(font="-family {Segoe UI} -size 9")
        self.bt_rot_horaire.configure(foreground="black")
        self.bt_rot_horaire.configure(highlightbackground="#d9d9d9")
        self.bt_rot_horaire.configure(highlightcolor="black")
        self.bt_rot_horaire.configure(text='''Horaire''')

        self.bt_rot_anti_horaire = tk.Button(self.lb_rotations)
        self.bt_rot_anti_horaire.place(x=140, y=80, height=26, width=80
                , bordermode='ignore')
        self.bt_rot_anti_horaire.configure(activebackground="#d9d9d9")
        self.bt_rot_anti_horaire.configure(activeforeground="black")
        self.bt_rot_anti_horaire.configure(background="#d9d9d9")
        self.bt_rot_anti_horaire.configure(command=test2_support.rotation_anti_horaire)
        self.bt_rot_anti_horaire.configure(disabledforeground="#a3a3a3")
        self.bt_rot_anti_horaire.configure(font="-family {Segoe UI} -size 9")
        self.bt_rot_anti_horaire.configure(foreground="black")
        self.bt_rot_anti_horaire.configure(highlightbackground="#d9d9d9")
        self.bt_rot_anti_horaire.configure(highlightcolor="black")
        self.bt_rot_anti_horaire.configure(text='''Anti-horaire''')

        self.sc_rotations =  tk.Scale(self.lb_rotations, from_=0.0, to=360.0, resolution=1.0)
        self.sc_rotations.place(x=20, y=2, height=56, width=197)
        self.sc_rotations.configure(activebackground="#d9d9d9")
        self.sc_rotations.configure(background="#d9d9d9")
        self.sc_rotations.configure(cursor="arrow")
        self.sc_rotations.configure(font="-family {Segoe UI} -size 9")
        self.sc_rotations.configure(foreground="black")
        self.sc_rotations.configure(highlightbackground="#d9d9d9")
        self.sc_rotations.configure(highlightcolor="black")
        self.sc_rotations.configure(length="197")
        self.sc_rotations.configure(orient="horizontal")
        self.sc_rotations.configure(tickinterval="90.0")
        self.sc_rotations.configure(troughcolor="#c4c4c4")
        self.sc_rotations.configure(variable=self.angle)

        self.lb_pinces_actions = tk.LabelFrame(self.top)
        self.lb_pinces_actions.place(x=260, y=240, height=115, width=230)
        self.lb_pinces_actions.configure(relief='groove')
        self.lb_pinces_actions.configure(font="-family {Segoe UI} -size 9")
        self.lb_pinces_actions.configure(foreground="black")
        self.lb_pinces_actions.configure(text='''Pinces''')
        self.lb_pinces_actions.configure(background="#d9d9d9")
        self.lb_pinces_actions.configure(highlightbackground="#d9d9d9")
        self.lb_pinces_actions.configure(highlightcolor="black")

        self.bt_ouvrir = tk.Button(self.lb_pinces_actions)
        self.bt_ouvrir.place(x=20, y=41, height=26, width=80
                , bordermode='ignore')
        self.bt_ouvrir.configure(activebackground="#d9d9d9")
        self.bt_ouvrir.configure(activeforeground="black")
        self.bt_ouvrir.configure(background="#d9d9d9")
        self.bt_ouvrir.configure(command=test2_support.ouvrir)
        self.bt_ouvrir.configure(disabledforeground="#a3a3a3")
        self.bt_ouvrir.configure(font="-family {Segoe UI} -size 9")
        self.bt_ouvrir.configure(foreground="black")
        self.bt_ouvrir.configure(highlightbackground="#d9d9d9")
        self.bt_ouvrir.configure(highlightcolor="black")
        self.bt_ouvrir.configure(text='''Ouvrir''')

        self.bt_fermer = tk.Button(self.lb_pinces_actions)
        self.bt_fermer.place(x=140, y=40, height=26, width=80
                , bordermode='ignore')
        self.bt_fermer.configure(activebackground="#d9d9d9")
        self.bt_fermer.configure(activeforeground="black")
        self.bt_fermer.configure(background="#d9d9d9")
        self.bt_fermer.configure(command=test2_support.fermer)
        self.bt_fermer.configure(disabledforeground="#a3a3a3")
        self.bt_fermer.configure(font="-family {Segoe UI} -size 9")
        self.bt_fermer.configure(foreground="black")
        self.bt_fermer.configure(highlightbackground="#d9d9d9")
        self.bt_fermer.configure(highlightcolor="black")
        self.bt_fermer.configure(text='''Fermer''')

        _style_code()
        self.bt_stop = ttk.Button(self.top)
        self.bt_stop.place(x=500, y=240, height=120, width=201)
        self.bt_stop.configure(command=test2_support.stop)
        self.bt_stop.configure(takefocus="")
        photo_location = os.path.join(_location,"./Stop-Sign-PNG-Pic.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.bt_stop.configure(image=_img0)
        self.bt_stop.configure(compound='left')

        self.text_log = tk.Text(self.top)
        self.text_log.place(x=20, y=360, height=94, width=674)
        self.text_log.configure(background="#d9d9d9")
        self.text_log.configure(font="TkTextFont")
        self.text_log.configure(foreground="black")
        self.text_log.configure(highlightbackground="#d9d9d9")
        self.text_log.configure(highlightcolor="black")
        self.text_log.configure(insertbackground="black")
        self.text_log.configure(selectbackground="#d9d9d9")
        self.text_log.configure(selectforeground="black")
        self.text_log.configure(wrap="word")

        self.bt_connexion = tk.Button(self.top)
        self.bt_connexion.place(x=20, y=10, height=26, width=227)
        self.bt_connexion.configure(activebackground="#d9d9d9")
        self.bt_connexion.configure(activeforeground="black")
        self.bt_connexion.configure(background="#d9d9d9")
        self.bt_connexion.configure(command=self.connexion_led)
        self.bt_connexion.configure(disabledforeground="#a3a3a3")
        self.bt_connexion.configure(font="-family {Segoe UI} -size 9")
        self.bt_connexion.configure(foreground="black")
        self.bt_connexion.configure(highlightbackground="#d9d9d9")
        self.bt_connexion.configure(highlightcolor="black")
        self.bt_connexion.configure(text='''Connexion''')

        self.bt_deconnexion = tk.Button(self.top)
        self.bt_deconnexion.place(x=260, y=10, height=26, width=227)
        self.bt_deconnexion.configure(activebackground="#d9d9d9")
        self.bt_deconnexion.configure(activeforeground="black")
        self.bt_deconnexion.configure(background="#d9d9d9")
        self.bt_deconnexion.configure(command=self.deconnexion_led)
        self.bt_deconnexion.configure(disabledforeground="#a3a3a3")
        self.bt_deconnexion.configure(font="-family {Segoe UI} -size 9")
        self.bt_deconnexion.configure(foreground="black")
        self.bt_deconnexion.configure(highlightbackground="#d9d9d9")
        self.bt_deconnexion.configure(highlightcolor="black")
        self.bt_deconnexion.configure(text='''Déconnexion''')

        self.bt_quitter = tk.Button(self.top)
        self.bt_quitter.place(x=500, y=10, height=26, width=197)
        self.bt_quitter.configure(activebackground="#d9d9d9")
        self.bt_quitter.configure(activeforeground="black")
        self.bt_quitter.configure(background="#d9d9d9")
        self.bt_quitter.configure(disabledforeground="#a3a3a3")
        self.bt_quitter.configure(font="-family {Segoe UI} -size 9")
        self.bt_quitter.configure(foreground="black")
        self.bt_quitter.configure(highlightbackground="#d9d9d9")
        self.bt_quitter.configure(highlightcolor="black")
        self.bt_quitter.configure(text='''Quitter''')
        self.bt_quitter.configure(command=self.quitter)

        self.lb_axes = tk.LabelFrame(self.top)
        self.lb_axes.place(x=20, y=40, height=55, width=680)
        self.lb_axes.configure(relief='groove')
        self.lb_axes.configure(font="-family {Segoe UI} -size 9")
        self.lb_axes.configure(foreground="black")
        self.lb_axes.configure(text='''Axes''')
        self.lb_axes.configure(background="#d9d9d9")
        self.lb_axes.configure(highlightbackground="#d9d9d9")
        self.lb_axes.configure(highlightcolor="black")

        self.rb_mvt_Z = tk.Radiobutton(self.lb_axes)
        self.rb_mvt_Z.place(x=503, y=22, height=18, width=171
                , bordermode='ignore')
        self.rb_mvt_Z.configure(activebackground="#d9d9d9")
        self.rb_mvt_Z.configure(activeforeground="black")
        self.rb_mvt_Z.configure(anchor='w')
        self.rb_mvt_Z.configure(background="#d9d9d9")
        self.rb_mvt_Z.configure(compound='left')
        self.rb_mvt_Z.configure(disabledforeground="#a3a3a3")
        self.rb_mvt_Z.configure(font="-family {Segoe UI} -size 9")
        self.rb_mvt_Z.configure(foreground="black")
        self.rb_mvt_Z.configure(highlightbackground="#d9d9d9")
        self.rb_mvt_Z.configure(highlightcolor="black")
        self.rb_mvt_Z.configure(justify='left')
        self.rb_mvt_Z.configure(text='''axe Z''')
        self.rb_mvt_Z.configure(variable=self.axe)
        self.rb_mvt_Z.configure(value="Z")

        self.rb_mvt_Y = tk.Radiobutton(self.lb_axes)
        self.rb_mvt_Y.place(x=266, y=22, height=18, width=171
                , bordermode='ignore')
        self.rb_mvt_Y.configure(activebackground="#d9d9d9")
        self.rb_mvt_Y.configure(activeforeground="black")
        self.rb_mvt_Y.configure(anchor='w')
        self.rb_mvt_Y.configure(background="#d9d9d9")
        self.rb_mvt_Y.configure(compound='left')
        self.rb_mvt_Y.configure(disabledforeground="#a3a3a3")
        self.rb_mvt_Y.configure(font="-family {Segoe UI} -size 9")
        self.rb_mvt_Y.configure(foreground="black")
        self.rb_mvt_Y.configure(highlightbackground="#d9d9d9")
        self.rb_mvt_Y.configure(highlightcolor="black")
        self.rb_mvt_Y.configure(justify='left')
        self.rb_mvt_Y.configure(text='''axe Y''')
        self.rb_mvt_Y.configure(variable=self.axe)
        self.rb_mvt_Y.configure(value="Y")

        self.rb_mvt_X = tk.Radiobutton(self.lb_axes)
        self.rb_mvt_X.place(x=29, y=22, height=18, width=172
                , bordermode='ignore')
        self.rb_mvt_X.configure(activebackground="#d9d9d9")
        self.rb_mvt_X.configure(activeforeground="black")
        self.rb_mvt_X.configure(anchor='w')
        self.rb_mvt_X.configure(background="#d9d9d9")
        self.rb_mvt_X.configure(compound='left')
        self.rb_mvt_X.configure(disabledforeground="#a3a3a3")
        self.rb_mvt_X.configure(font="-family {Segoe UI} -size 9")
        self.rb_mvt_X.configure(foreground="black")
        self.rb_mvt_X.configure(highlightbackground="#d9d9d9")
        self.rb_mvt_X.configure(highlightcolor="black")
        self.rb_mvt_X.configure(justify='left')
        self.rb_mvt_X.configure(text='''Axe X''')
        self.rb_mvt_X.configure(variable=self.axe)
        self.rb_mvt_X.configure(value="X")

        self.lb_mouvements = tk.LabelFrame(self.top)
        self.lb_mouvements.place(x=20, y=100, height=135, width=230)
        self.lb_mouvements.configure(relief='groove')
        self.lb_mouvements.configure(font="-family {Segoe UI} -size 9")
        self.lb_mouvements.configure(foreground="black")
        self.lb_mouvements.configure(text='''Mouvements''')
        self.lb_mouvements.configure(background="#d9d9d9")
        self.lb_mouvements.configure(highlightbackground="#d9d9d9")
        self.lb_mouvements.configure(highlightcolor="black")

        self.bt_avancer = tk.Button(self.lb_mouvements)
        self.bt_avancer.place(x=20, y=94, height=26, width=80
                , bordermode='ignore')
        self.bt_avancer.configure(activebackground="#d9d9d9")
        self.bt_avancer.configure(activeforeground="black")
        self.bt_avancer.configure(background="#d9d9d9")
        self.bt_avancer.configure(command=test2_support.avancer)
        self.bt_avancer.configure(disabledforeground="#a3a3a3")
        self.bt_avancer.configure(font="-family {Segoe UI} -size 9")
        self.bt_avancer.configure(foreground="black")
        self.bt_avancer.configure(highlightbackground="#d9d9d9")
        self.bt_avancer.configure(highlightcolor="black")
        self.bt_avancer.configure(text='''Avancer''')

        self.bt_reculer = tk.Button(self.lb_mouvements)
        self.bt_reculer.place(x=140, y=94, height=26, width=80
                , bordermode='ignore')
        self.bt_reculer.configure(activebackground="#d9d9d9")
        self.bt_reculer.configure(activeforeground="black")
        self.bt_reculer.configure(background="#d9d9d9")
        self.bt_reculer.configure(command=test2_support.reculer)
        self.bt_reculer.configure(disabledforeground="#a3a3a3")
        self.bt_reculer.configure(font="-family {Segoe UI} -size 9")
        self.bt_reculer.configure(foreground="black")
        self.bt_reculer.configure(highlightbackground="#d9d9d9")
        self.bt_reculer.configure(highlightcolor="black")
        self.bt_reculer.configure(text='''Reculer''')

        self.sc_mouvements =  tk.Scale(self.lb_mouvements, from_=0.0, to=1000.0, resolution=1.0)
        self.sc_mouvements.place(x=20, y=10, height=56, width=197)
        self.sc_mouvements.configure(activebackground="#d9d9d9")
        self.sc_mouvements.configure(background="#d9d9d9")
        self.sc_mouvements.configure(cursor="arrow")
        self.sc_mouvements.configure(font="-family {Segoe UI} -size 9")
        self.sc_mouvements.configure(foreground="black")
        self.sc_mouvements.configure(highlightbackground="#d9d9d9")
        self.sc_mouvements.configure(highlightcolor="black")
        self.sc_mouvements.configure(length="197")
        self.sc_mouvements.configure(orient="horizontal")
        self.sc_mouvements.configure(tickinterval="200.0")
        self.sc_mouvements.configure(troughcolor="#c4c4c4")
        self.sc_mouvements.configure(variable=self.mouvement)


        self.lb_pinces_deplacements = tk.LabelFrame(self.top)
        self.lb_pinces_deplacements.place(x=260, y=100, height=135, width=230)
        self.lb_pinces_deplacements.configure(relief='groove')
        self.lb_pinces_deplacements.configure(font="-family {Segoe UI} -size 9")
        self.lb_pinces_deplacements.configure(foreground="black")
        self.lb_pinces_deplacements.configure(text='''Pinces - déplacements''')
        self.lb_pinces_deplacements.configure(background="#d9d9d9")
        self.lb_pinces_deplacements.configure(highlightbackground="#d9d9d9")
        self.lb_pinces_deplacements.configure(highlightcolor="black")

        self.sc_deplacements_pinces =  tk.Scale(self.lb_pinces_deplacements, from_=0.0, to=100.0, resolution=1.0)
        self.sc_deplacements_pinces.place(x=20, y=10, height=66, width=197)
        self.sc_deplacements_pinces.configure(activebackground="#d9d9d9")
        self.sc_deplacements_pinces.configure(background="#d9d9d9")
        self.sc_deplacements_pinces.configure(cursor="arrow")
        self.sc_deplacements_pinces.configure(font="-family {Segoe UI} -size 9")
        self.sc_deplacements_pinces.configure(foreground="black")
        self.sc_deplacements_pinces.configure(highlightbackground="#d9d9d9")
        self.sc_deplacements_pinces.configure(highlightcolor="black")
        self.sc_deplacements_pinces.configure(length="197")
        self.sc_deplacements_pinces.configure(orient="horizontal")
        self.sc_deplacements_pinces.configure(tickinterval="20.0")
        self.sc_deplacements_pinces.configure(troughcolor="#c4c4c4")
        self.sc_deplacements_pinces.configure(variable=self.deplacement_pince)

        self.bt_descendre = tk.Button(self.lb_pinces_deplacements)
        self.bt_descendre.place(x=140, y=94, height=26, width=80
                , bordermode='ignore')
        self.bt_descendre.configure(activebackground="#d9d9d9")
        self.bt_descendre.configure(activeforeground="black")
        self.bt_descendre.configure(background="#d9d9d9")
        self.bt_descendre.configure(disabledforeground="#a3a3a3")
        self.bt_descendre.configure(font="-family {Segoe UI} -size 9")
        self.bt_descendre.configure(foreground="black")
        self.bt_descendre.configure(highlightbackground="#d9d9d9")
        self.bt_descendre.configure(highlightcolor="black")
        self.bt_descendre.configure(text='''Descendre''')
        self.bt_descendre.configure(command=test2_support.descendre)

        self.bt_monter = tk.Button(self.lb_pinces_deplacements)
        self.bt_monter.place(x=20, y=94, height=26, width=80
                , bordermode='ignore')
        self.bt_monter.configure(activebackground="#d9d9d9")
        self.bt_monter.configure(activeforeground="black")
        self.bt_monter.configure(background="#d9d9d9")
        self.bt_monter.configure(disabledforeground="#a3a3a3")
        self.bt_monter.configure(font="-family {Segoe UI} -size 9")
        self.bt_monter.configure(foreground="black")
        self.bt_monter.configure(highlightbackground="#d9d9d9")
        self.bt_monter.configure(highlightcolor="black")
        self.bt_monter.configure(text='''Monter''')
        self.bt_monter.configure(command=test2_support.monter)

        self.lb_status = tk.LabelFrame(self.top)
        #self.lb_status.place(x=500, y=100, height=135, width=198)
        self.lb_status.place(x=500, y=100, height=60, width=198)
        self.lb_status.configure(relief='groove')
        self.lb_status.configure(foreground="black")
        self.lb_status.configure(text='''Status''')
        self.lb_status.configure(background="#d9d9d9")
        self.lb_status.configure(highlightbackground="#d9d9d9")
        self.lb_status.configure(highlightcolor="black")

        self.lb_restart = tk.LabelFrame(self.top)
        self.lb_restart.place(x=500, y=165, height=70, width=198)
        self.lb_restart.configure(relief='groove')
        self.lb_restart.configure(foreground="black")
        self.lb_restart.configure(text='''Restart''')
        self.lb_restart.configure(background="#d9d9d9")
        self.lb_restart.configure(highlightbackground="#d9d9d9")
        self.lb_restart.configure(highlightcolor="black")

        self.bt_restart = tk.Button(self.lb_restart)
        self.bt_restart.place(x=60, y=25, height=26, width=80
                , bordermode='ignore')
        self.bt_restart.configure(activebackground="#d9d9d9")
        self.bt_restart.configure(activeforeground="black")
        self.bt_restart.configure(background="#d9d9d9")
        self.bt_restart.configure(disabledforeground="#a3a3a3")
        self.bt_restart.configure(font="-family {Segoe UI} -size 9")
        self.bt_restart.configure(foreground="black")
        self.bt_restart.configure(highlightbackground="#d9d9d9")
        self.bt_restart.configure(highlightcolor="black")
        self.bt_restart.configure(text='''Restart''')
        self.bt_restart.configure(command=test2_support.restart)

        self.Canvas = tk.Canvas(self.lb_status)
        self.Canvas.place(x=10, y=15, height=40, width=178, bordermode='ignore')
        self.Canvas.configure(background="#d9d9d9")
        #self.Canvas.configure(borderwidth="2")
        self.Canvas.configure(highlightbackground="#d9d9d9")
        self.Canvas.configure(highlightcolor="black")
        self.Canvas.configure(insertbackground="black")
        self.Canvas.configure(relief="ridge")
        self.Canvas.configure(selectbackground="#d9d9d9")
        self.Canvas.configure(selectforeground="black")
        self.led_status = self.Canvas.create_oval(65,5,95,35, width=0, fill='red')

    def write(self, text):
        self.text_log.config(state="normal")
        self.text_log.insert('end', text)
        self.text_log.config(state="disabled")
        self.text_log.see('end')
        self.top.update()

    # Connexion
    def connexion_led(self):
        if test2_support.connexion():
            self.Canvas.itemconfig(self.led_status, fill="green")
            test2_support.done()

    # Déconnexion
    def deconnexion_led(self):
        test2_support.com.event_stop.set()
        test2_support.deconnexion()
        self.t.cancel()
        self.Canvas.itemconfig(self.led_status, fill="red")

    def quitter(self):
        try:
            self.deconnexion_led()
        except:
            pass
        self.top.destroy()



def start_up():
    test2_support.main()

if __name__ == '__main__':
    test2_support.main()




